#This file contains the specification for our RESTful webservice.  For a nice visual look at it, feel free to use swagger editor (https://editor.swagger.io/)
#This is used to generate both server jax-rs interfaces, and pure java client implementation.

#Additional notes:
#In order to quickly show open api code generation, I put the liveliness and readiness checks here.  In an enterprise organization, these endpoints might be automatically generated
#using codegen and not specified here.
#Also, a health check framework (like quarkus open rye) would be used.  However, I wrote my own implementation to demonstrate how this works internally.
#Additionally, request headers that are enterprise standards (such as request id and trace id), would likely not be included here, and would instead just
#be a given.
openapi: "3.0.0"
info:
  version: 1.0.0
  title: "Reading Comprehension"
  license:
    name: "MIT"
#servers:
#  - url: http://api.connorbutch.com/reading/v1 #NOTE: this might not be the correct base url for now.... will likely publish to a cloud provider before doing dns.....
paths:
  /health/liveliness:
    get:
      summary: "Check the liveliness of the application"
      description: "This will be invoked periodically to determine if a pod should service traffic.  However, it should not be invoked externally"
      operationId: "livelinessCheck"
      tags:
        - "health"
        - "liveliness"
      responses:
        '200':
          description: "A health response.  Assuming you get a 200, the body can be ignored.  This must be a GET request (not a HEAD request) for kubernetes monitoring."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
        '502':
          description: "Service unavailable"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
        default:
          description: "Unknown error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
  /health/readiness:
    get:
      summary: "Check the readiness of an app."
      description: "Check the readiness of the application (used for kubernetes).  This should likely not be invoked by anyone but kubernetes itself (or potentially monitoring from the kubelet)"
      operationId: "readinessCheck"
      parameters:
        - x-timeout-value:
          description: "The max allowed time (in milliseconds) before a health check request should determine a service is unavailable."
          name: "x-timeout-value"
          in: "header"
          schema:
            type: "integer"
          required: false
      tags:
        - "health"
        - "readiness"
      responses:
        '200':
          description: "A health response showing the status of dependencies.  When a 200 is returned, the application can successfully connect to other services/dependencies"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadinessHealthResponse"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
        '502':
          description: "Service  -- this means at least one of the downstream dependencies was down, or we timed out.  The list can be parsed to examine which connections are failing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadinessHealthResponse"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
        default:
          description: "Unknown error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
  /assessments:
    get:
      summary: "This operation allows to retrieve various assessments"
      description: "This allows u user to get assessments.  The list should always be returned in the same order, and by using the limit and offset query parameters, pagination can be achieved (with the added functionality of a total number of assessments header indicating the total number of assessments)"
      operationId: "getAssessments"
      parameters:
        - in: "query"
          name: "limit"
          description: "A limit on the max number of assessments returned.  If the limit exceeds a certain maximum, then only a certain amount will be passed back and the x-maximum-limit header value will indicate this."
          schema:
            type: "integer"
          required: false
        - in: "query"
          name: "offset"
          description: "The offset used to retrieve assessments.  This can be used with the limit query parameter to achieve pagination."
          schema:
            type: "integer"
          required: false
      tags:
        - "query"
        - "assessments"
      responses:
        '200':
          description: "A list of assessments, based on the limit and offset specified."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Assessment"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
            x-total-assessments:
              schema:
                type: "integer"
                example: "4721"
                description: "The total number of assessments stored"
        '400':
          description: "This means that there was an invalid limit or offset (or both)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: "Unknown error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: "This operation allows to add an assessment for a given book"
      description: "This allows a teacher to create an assessment."
      operationId: "createAssessment"
      #this line shows using custom extensions.... in retrospect; I would use a put instead of a post to always be idempotent here
      x-dont-retry: true
      requestBody:
        description: "The assessment to add"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assessment"
      tags:
        - "insert"
        - "assessments"
      responses:
        '201':
          description: "The assessment was created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assessment"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
        '400':
          description: "This means that there was an invalid assessment passed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '409':
          description: "This means that the user was attempting to create an assessment for an isbn that already has an isbn registered"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: "Unknown error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /assessments/{isbn}:
    get:
      summary: "This operation allows to retrieve an assessment by isbn"
      description: "This allows a user to retrieve an assessment for a specific isbn"
      operationId: "getAssessmentByIsbn"
      parameters:
        - in: "path"
          name: "isbn"
          description: "The particular isbn to search on"
          schema:
            type: "integer"
            format: "int64"
          required: true
      tags:
        - "query"
        - "assessments"
      responses:
        '200':
          description: "The assessment with the given isbn"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assessment"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
            x-total-assessments:
              schema:
                type: "integer"
                example: "4721"
                description: "The total number of assessments stored"
        '400':
          description: "This means that the isbn passed was invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: "This means that no assessment exists for the isbn passed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: "Unknown error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /assessments/{isbn}/questions:
    get:
      summary: "This operation allows to retrieve the questions for a given assessment"
      description: "This allows a user to retrieve questions for a specific assessment"
      operationId: "getQuestionsForAssessment"
      parameters:
        - in: "path"
          name: "isbn"
          description: "The isbn of the assessment"
          schema:
            type: "integer"
            format: "int64"
          required: true
      tags:
        - "query"
        - "questions"
        - "assessments"
      responses:
        '200':
          description: "The questions for this particular assessment"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Question"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
            x-total-assessments:
              schema:
                type: "integer"
                example: "4721"
                description: "The total number of assessments stored"
        '400':
          description: "This means that the isbn passed was invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: "This means that no assessment exists for the isbn passed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: "Unknown error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: "This operation allows to add an assessment for a given book"
      description: "This allows a teacher to add a question for a given assessment"
      operationId: "createQuestion"
      parameters:
        - in: "path"
          name: "isbn"
          description: "The isbn of the assessment"
          schema:
            type: "integer"
            format: "int64"
          required: true
      requestBody:
        description: "The question to add"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Question"
      tags:
        - "query"
        - "questions"
      responses:
        '201':
          description: "The question was created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
        '400':
          description: "This means that there was an invalid assessment passed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: "This means that the user was attempting to add a question for a book that is not yet registered"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: "Unknown error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /errors/{errorId}:
    get:
      summary: "This operation allows to retrieve more information about an error based on the (unique) error id"
      operationId: "getErrorById"
      parameters:
        - in: "path"
          name: "errorId"
          description: "The particular errorId to search on"
          schema:
            type: "integer"
            format: "int32"
          required: true
      tags:
        - "query"
        - "errors"
      responses:
        '200':
          description: "The detailed error info with the given id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedErrorInfo"
          headers:
            x-request-id:
              schema:
                type: "string"
                format: "uuid"
                example: "9184193d-756a-4edb-bec6-5dec79becc16"
                description: "A unique identifier (UUID) for this request generated by the server"
            x-trace-id:
              schema:
                type: "string"
                format: "uuid"
                example: "eadbc522-2ddb-4d6a-836c-6d89c4cc720e"
                description: "A trace id for this interaction with the system.  If none is sent in the request, then one will be generated and propagated to downstream requests (as well as returned here)."
        '400':
          description: "This means that the error id passed was invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: "This means that no assessment exists for the error id passed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: "Unknown error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    HealthResponse:
      description: "Response for a liveliness health check"
      required:
        - "healthStatus"
      properties:
        healthStatus:
          #NOTE: using enums can break generated clients when adding a new field, so avoid these here
          type: "string"
          nullable: true
          example: "ok"
          description: "Will always be ok, for now."
    ErrorResponse:
      description: "Response for any error encountered by the application"
      required:
        - "errorReasons"
        - "timestamp"
      properties:
        errorReasons:
          type: "array"
          items:
            $ref: "#/components/schemas/ErrorReason"
          nullable: false
          description: "A list of reasons why the request failed.  This may have only one error reason, or it could be multiple (in the case the client submits bad data)"
        timestamp:
          type: "string"
          nullable: false
          description: "The timestamp of when the error occurred, generated on the server-side"
          format: "date-time"
    ReadinessHealthResponse:
      description: "This is a health response for a readiness health check.  It contains a downstream dependency for each component this depends on (such as a database, system property, or external webservice) and an overall status.  If one or more dependencies are unreachable, or timeout, then the overall status will be down, otherwise it will show as up."
      required:
        - "isAvailable"
        - "availableDependencies"
        - "unavailableDependencies"
      properties:
        isAvailable:
          type: "boolean"
          nullable: false
          description: "Denotes whether the overall service is available.  Is true if all checks are available.  if even one dependency is unavailable (for either error or timeout) this will be false"
        availableDependencies:
          type: "array"
          description: "This array contains the downstream dependencies that are available.  Pulled into a separate array to make parsing easier"
          items:
            $ref: '#/components/schemas/DownstreamDependency'
        unavailableDependencies:
          type: array
          description: "This array contains the downstream dependencies that are NOT available (due to either timeout or error).  Pulled into a separate array to make parsing easier"
          items:
            $ref: '#/components/schemas/DownstreamDependency'
    DownstreamDependency:
      description: "Indicates whether or not we are able to connect to a downstream dependency"
      required:
        - "name"
        - "status"
      properties:
        name:
          type: "string"
          nullable: false
          description: "A unique, and descriptive name for this downstream dependency"
          example: "reading-comprehension-database"
        isAvailable:
          type: "boolean"
          nullable: false
          description: "A value indicating whether or not we could connect to this dependency.  A timeout is considered false for now"
    Assessment:
      description: "An assessment for a single book (where a book is determined by an isbn).  An assessment can have one or more questions associated with it"
      required:
        - isbn
        - numberOfPoints
        - readingLevel
        - title
        - authorFirstName
        - authorLastName
        - createdTeacherId
      properties:
        isbn:
          #isbn cannot start with leading 0
          type: "integer"
          format: "int64"
          nullable: false
          description: "The isbn (10) for the assessment"
          example: "9780553213119"
        numberOfPoints:
          type: "number"
          format: "float"
          nullable: false
          description: "The number of points assigned to this assessment.  Generally speaking, the higher the number of points, the longer/harder the book is to read."
          example: "15.2"
        readingLevel:
          type: "number"
          format: "float"
          nullable: false
          description: "The reading level (on a scale of 0.0-12.0) for the given assessment.  The higher the reading level, the harder the book is to copmrehend (note, this is not correlated to length of book whatsoever)."
          example: "8.0"
        title:
          type: "string"
          nullable: false
          description: "The title of the book."
          example: "Moby Dick"
        authorFirstName:
          type: "string"
          nullable: false
          description: "The first name of the author of the book"
          example: "Herman"
        authorLastName:
          type: "string"
          nullable: false
          description: "The last name of the author of the book"
          example: "Melleville"
        createdTeacherId:
          type: "integer"
          nullable: false
          description: "The id of the teacher that wrote the assessment for this book.  It should link to the id assigned in the teacher service."
          example: "187323991"
    ErrorReason:
      description: "An error reason is a single, unique reason for an error.  Please note that in the case of multiple errors (usually with user input), there can be multiple error reasons returned
      In the future, there will be an endpoint given to list these errors, and to get more information on a specific error"
      required:
        - errorId
        - explanation
      properties:
        errorId:
          type: "integer"
          format: "int32"
          nullable: false
          description: "A unique id for an error reason.  This can be used in a get request to find more information"
          example: "34"
        explanation:
          type: "string"
          nullable: false
          description: "A brief explanation of the error.  Please note that this may change, and the errorId should be used to determine information"
          example: "Isbn must be greater than zero.  The value passed was -1322"
    DetailedErrorInfo:
      description: "This provides additional information about an error that occurred.  Please note that this gives one example of what could be causing the issue (and your exact request may be slightly different).  However, this can be used to get more information about a failure"
      required:
        - errorId
        - exampleUrl
        - exampleRequestMethod
        - exampleRequestBody
        - exampleCorrectUrl
        - exampleCorrectRequestBody
        - errorReason
      properties:
        errorId:
          type: "integer"
          format: "int32"
          nullable: false
          example: "21"
        exampleUrl:
          type: "string"
          nullable: false
          example: "http://localhost:8080/assessments"
          description: "This is an example example url, that may be incorrect.  Compare with the example correct url below"
        exampleRequestBody:
          type: "string"
          description: "This is an example of an incorrect "
          nullable: true
          example: '{}'
        exampleRequestMethod:
          type: "string"
          description: "The http method"
          example: "POST"
        exampleCorrectUrl:
          type: "string"
          nullable: false
        exampleCorrectRequestBody:
          type: "string"
          nullable: true
          example: '{isbn: 12}'
        errorReason:
          $ref: '#/components/schemas/ErrorReason'
    Question:
      description: "A question is used to determine if a student understands a certain portion of the book"
      required:
        - questionId
        - questionText
        - correctAnswer
        - incorrectAnswers
      properties:
        questionId:
          type: "integer"
          format: "int64"
          nullable: false
          description: "A unique id for this question"
          example: "34"
          readOnly: true
        questionText:
          type: "string"
          nullable: false
          description: "The text for this question"
          example: "What year was John born?"
        correctAnswer:
          type: "string"
          nullable: false
          description: "The correct answer to this question"
          example: "John was born in 1992"
        incorrectAnswers:
          nullable: false
          type: "array"
          items:
            type: "string"